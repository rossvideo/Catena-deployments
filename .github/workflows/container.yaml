name: Build Example images

on:
  repository_dispatch:
    types: [build-examples]

env:
  REGISTRY: ghcr.io
  CMAKE_INSTALL_PREFIX: /usr/local/.local
  CONNECTIONS: gRPC;REST
  BUILD_TARGET: build/cpp
  WORKDIR: /app

jobs:
  check-trigger:
    runs-on: ubuntu-latest
    outputs:
      triggered: ${{ steps.check.outputs.triggered }}
      trigger_ref: ${{ steps.check.outputs.trigger_ref }}
    steps:
      - name: Check for repository_dispatch event
        id: check
        run: |
          if [ "${{ github.event_name }}" == "repository_dispatch" ]; then
            echo "Event is repository_dispatch, proceeding with build."
            echo "triggered=true" >> $GITHUB_OUTPUT
            if [ -n "${{ github.event.client_payload.ref }}" ]; then
              echo "Trigger ref: ${{ github.event.client_payload.ref }}"
              echo "trigger_ref=${{ github.event.client_payload.ref }}" >> $GITHUB_OUTPUT
            else
              echo "No ref provided in client_payload, failing build."
              echo "triggered=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          else
            echo "Event is not repository_dispatch, skipping build."
            echo "triggered=false" >> $GITHUB_OUTPUT
          fi

  build-examples:
    runs-on: ubuntu-latest
    needs: check-trigger
    if: needs.check-trigger.outputs.triggered == 'true'
    outputs:
      examples: ${{ steps.generate-matrix.outputs.examples }}
      version: ${{ steps.get-version.outputs.version }}
    container:
      image: ghcr.io/rossvideo/catena-toolchain-cpp:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      volumes:
        # env context does not work here, that's really DUMB
        - ${{ github.workspace }}/Catena:/app
      options: --user root:root
      env:
        BUILD_TARGET: build/cpp
        CMAKE_INSTALL_PREFIX: /usr/local/.local
        CONNECTIONS: gRPC;REST
        WORKDIR: /app

    permissions:
      contents: read
    
    steps:
      - name: Checkout Catena
        uses: actions/checkout@v4
        with:
          path: Catena
          ref: ${{ needs.check-trigger.outputs.trigger_ref }}
          repository: rossvideo/Catena
          submodules: 'recursive'

      - name: Build examples
        shell: bash
        run: |
          echo "Building OpenAPI"
          cd ${WORKDIR}/smpte
          ./build-openapi.sh
          echo "Done building OpenAPI"

          mkdir -p ${WORKDIR}/${BUILD_TARGET}
          cd ${WORKDIR}/${BUILD_TARGET}
          pwd
          cmake -G Ninja -DCONNECTIONS=${CONNECTIONS} -DUNIT_TESTING=off \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} \
            -DGLOG_LOGGING_DIR=${WORKDIR}/logs \
            -B ${WORKDIR}/${BUILD_TARGET} ${WORKDIR}/sdks/cpp
          ninja
          # copy the built examples to a directory for packaging
          EXAMPLES_DIR=$WORKDIR/examples
          mkdir -p $EXAMPLES_DIR
          for CONN in ${CONNECTIONS//;/ }; do
            echo "Building examples for connection: $CONN"
            mkdir -p $EXAMPLES_DIR/$CONN
            for EXAMPLE in connections/${CONN}/examples/*; do
                if [[ ! -d "$EXAMPLE" ]] || [[ "$(basename "$EXAMPLE")" == "CMakeFiles" ]]; then
                continue
              fi
              echo "Grabbing example: $EXAMPLE"
              EXAMPLE_NAME=$(basename "$EXAMPLE")
              EXAMPLE_PATH=$EXAMPLE/$EXAMPLE_NAME
              # Append the connection type to the example name if it's not already included
              if [[ ! "$EXAMPLE_NAME" =~ $CONN$ ]]; then
                EXAMPLE_NAME="${EXAMPLE_NAME}_${CONN}"
              fi
              EXAMPLE_NAME="${EXAMPLE_NAME//_/-}"
              mkdir -p $EXAMPLES_DIR/$CONN/$EXAMPLE_NAME
              cp $EXAMPLE_PATH $EXAMPLES_DIR/$CONN/$EXAMPLE_NAME/$EXAMPLE_NAME
              # look for static files in the source directory and copy them if they exist
              STATIC_DIR=$WORKDIR/sdks/cpp/$EXAMPLE/static
              if [[ -d "$STATIC_DIR" ]]; then
                echo "Copying static files from $STATIC_DIR to $EXAMPLES_DIR/$CONN/$EXAMPLE_NAME/static"
                mkdir -p $EXAMPLES_DIR/$CONN/$EXAMPLE_NAME/static
                cp -r $STATIC_DIR/* $EXAMPLES_DIR/$CONN/$EXAMPLE_NAME/static/
              fi
            done
          done

      - name: Save examples as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: examples
          path: ${{ env.WORKDIR }}/examples
          retention-days: 2
      
      - name: Generate matrix for example builds
        id: generate-matrix
        run: |
            EXAMPLES_JSON=$(find $WORKDIR/examples -mindepth 2 -maxdepth 2 -type d -printf '"%P",')
            EXAMPLES_JSON="[${EXAMPLES_JSON%,}]"
            echo "examples=${EXAMPLES_JSON}" >> $GITHUB_OUTPUT

      - name: Get version
        id: get-version
        run: |
          # Extract version from VERSION.txt
          VERSION=$(sed -nE 's/[^-]+-v([^-]+)-.*/\1/p' ${WORKDIR}/sdks/cpp/VERSION.txt)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Print examples
        run: |
          echo "Examples found:"
          echo "${{ steps.generate-matrix.outputs.examples }}"
          find $WORKDIR/examples
          ls -l $WORKDIR/examples
          echo "Examples saved to artifact 'examples'"

  build-and-push-single-examples:
    runs-on: ubuntu-latest
    needs: build-examples
    strategy:
      matrix:
        example: ${{ fromJson(needs.build-examples.outputs.examples) }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download examples
        uses: actions/download-artifact@v4
        with:
          name: examples
          path: ${{ github.workspace }}/examples

      - name: Process example name
        id: process-name
        run: |
          EXAMPLE_PATH="examples/${{ matrix.example }}"
          CONNECTION=$(echo "${{ matrix.example }}" | cut -d'/' -f1)
          EXAMPLE=$(basename "${{ matrix.example }}")
          # Append the connection type to the example name if it's not already included
          if [[ ! "$EXAMPLE" =~ $CONNECTION$ ]]; then
            EXAMPLE="${EXAMPLE}-${CONNECTION}"
          fi
          echo "example_path=${EXAMPLE_PATH}" >> $GITHUB_OUTPUT
          echo "connection=${CONNECTION}" >> $GITHUB_OUTPUT
          echo "example=${EXAMPLE}" >> $GITHUB_OUTPUT
          echo "EXAMPLE_PATH=${EXAMPLE_PATH}"
          echo "CONNECTION=${CONNECTION}"
          echo "EXAMPLE=${EXAMPLE}"

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/rossvideo/catena
          # -dev suffix for now, until we figure out building on main
          tags: |
            type=raw,suffix=-dev,value=${{ steps.process-name.outputs.example }}
          labels: |
            org.opencontainers.image.title=Catena ${{ steps.process-name.outputs.example }}
            org.opencontainers.image.description=Self contained example for Catena ${{ steps.process-name.outputs.example }}
            org.opencontainers.image.vendor=Ross Video

      - name: Print stuff
        run: |
          echo "tags: ${{ steps.meta.outputs.tags }}"
          echo "labels: ${{ steps.meta.outputs.labels }}"
          find .
      
      - name: Build and push image for ${{ matrix.example }}
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          file: container/Dockerfile
          push: true
          target: ${{ steps.process-name.outputs.connection }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            CONNECTION=${{ steps.process-name.outputs.connection }}
            EXAMPLE=${{ steps.process-name.outputs.example }}
            EXAMPLE_PATH=${{ steps.process-name.outputs.example_path }}
            WORKDIR=${{ env.WORKDIR }}

  compile-examples-json:
    runs-on: ubuntu-latest
    needs: build-examples
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: "Build examples json"
        shell: python
        run: |
          import json
          import os
          # workflow can just inject the output, that's cool
          # its a json array of "connection/example-connection"
          examples = json.loads('${{ needs.build-examples.outputs.examples }}')
          # build a json of connection -> [examples]
          out_json = {}
          out_json['version'] = '${{ needs.build-examples.outputs.version }}'
          # loop through examples
          for example in examples:
            # split on /
            conn, ex_name = example.split('/')
            # remove -conn from ex_name if it exists
            if ex_name.endswith(f'-{conn}'):
              ex_name = ex_name[:-(len(conn)+1)]
            # add to out_json
            if not conn in out_json:
              out_json[conn] = []
            out_json[conn].append(ex_name)
          # write to examples.json
          with open('examples.json', 'w') as f:
            json.dump(out_json, f, indent=2)
      
      - name: Print stuff
        run: |
          cat examples.json
      
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          add-paths: examples.json
          commit-message: Update examples.json [skip ci]
          branch: examples-changed
          title: Update examples.json
          body: This PR updates the `examples.json` file with the latest built examples.
          reviewers: 'abrown-RV,NR-RV,ctwarog-ross'
          delete-branch: true
